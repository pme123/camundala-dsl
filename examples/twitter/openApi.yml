openapi: 3.0.3
info:
  title: Twitter Process API
  version: '1.0'
  description: "\n\nGenerated Open API:\n* **openApi.yml**: Documentation of the Processes.\n\
    \  With small adjustments this can be imported to Postman!\n\n>WARNING: This is\
    \ an experimental way and not approved.\n\nI did the following Adjustments:\n\
    * Changed it to _Scala_ to simplify my example.\n* Added extensions to the Camundala\
    \ DSL.\n* Added the BPMN implementation in Camundala DSL.\n\nThere are 2 application\
    \ here:\n1. **TwitterProcessRunnerApp**\n   \n   Runs the _Camundala_ Dev Process\
    \ (from specification BPMN to implementation BPMN).\n\n2. **TwitterServletProcessApplication**\n\
    \n   Runs the Camunda Engine (Spring Boot) with the generated BPMN. \n\n## How\
    \ to run it\n> **this needs [sbt](https://www.scala-sbt.org)**\n\n`sbt exampleTwitter/run`\n\
    \nNow you can select 1 or 2:\n```\nMultiple main classes detected. Select one\
    \ to run:\n [1] camundala.examples.twitter.TwitterServletProcessApplication\n\
    \ [2] camundala.examples.twitter.bpmn.TwitterProcessRunnerApp\n ```\nThis is the\
    \ [original README](https://github.com/camunda/camunda-bpm-examples/tree/master/spring-boot-starter/example-twitter)\n\
    \nThis example demonstrates how you can use a BPMN process and the Tweeter API\
    \ to build a simple Twitter client. \nIt uses `camunda-bpm-spring-boot-starter-webapp`\
    \ and thus embed Tomcat as a web container.\n\nThe example contains:\n- a process\
    \ application with one process deployed on the Camunda engine\n- custom forms\
    \ to create and review the Tweet\n- creates on startup an admin user \"demo\"\
    \ (password: demo)\n\nIt also demonstrates the usage of the `application.yaml`\
    \ configuration file.\n\n## How is it done\n\n1. To embed the Camunda Engine you\
    \ must add following dependency to your `pom.xml`:\n   \n```xml\n...\n<dependency>\n\
    \ <groupId>org.camunda.bpm.springboot</groupId>\n <artifactId>camunda-bpm-spring-boot-starter-webapp</artifactId>\n\
    \ <version>7.15.0</version>\n</dependency>\n...\n```\n\n2. With Spring Boot you\
    \ usually create an \"application\" class annotated with `@SpringBootApplication`.\
    \ In order to have a Camunda process application\nregistered, you can simply add\
    \ the annotation `@EnableProcessApplication` to the same class and also include\
    \ the `processes.xml` file in your `META-INF` folder:\n\n```java\n@SpringBootApplication\n\
    @EnableProcessApplication\npublic class TwitterServletProcessApplication {\n\n\
    \  public static void main(String... args) {\n    SpringApplication.run(TwitterServletProcessApplication.class,\
    \ args);\n  }\n}\n```\n\n3. You can also put BPMN, CMMN and DMN files in your\
    \ classpath, they will be automatically deployed and registered within the process\
    \ application.\n\n4. You can configure your Spring Boot application using `application.yaml`\
    \ file. All possible Camunda-specific configuration parameters are listed [here](https://docs.camunda.org/manual/7.15/user-guide/spring-boot-integration/configuration/)\n\
    \n5. This example provides two implementations for posting a Tweet:\n* `TweetContentOfflineDelegate`\
    \ (default) - will just print the tweet content on console\n* `TweetContentDelegate`\
    \ - can post a tweet when providing credentials for your twitter account\n\nYou\
    \ can switch between two implementations by changing the name of a Spring bean\
    \ to `tweetAdapter`. This `tweetAdapter` bean is further referenced in \nthe BPMN\
    \ diagram via \"Delegate expression\" in a service task:\n\n```xml\n...\n<serviceTask\
    \ id=\"service_task_publish_on_twitter\" name=\"Publish on Twitter\" camunda:delegateExpression=\"\
    #{tweetAdapter}\">\n  ...\n</serviceTask>\n...\n```\n\n## Run the application\
    \ and check the result\n\nYou can build the application by `mvn clean install`\
    \ and then run it with `java -jar` command.\n\nGo to `http://localhost:8080` (provide\
    \ login/password from `application.yaml`, default: demo/demo) then go to Tasklist\
    \ and try to start the process and complete the tasks, observe log entries or\
    \ the real tweet when `TweetContentDelegate` is used.\n\nThere is no CHANGELOG.md\
    \ in the Package.\n"
servers:
- url: http://localhost:8887/engine-rest
paths:
  /process-definition/key/{key}/start/--REMOVE%3ATwitterDemoProcess--:
    post:
      tags:
      - TwitterDemoProcess
      summary: 'TwitterDemoProcess: StartProcessInstance'
      description: "This runs the Twitter Approvement Process.\n\nUsage as _CallActivity_:\n\
        ```\nlazy val TwitterDemoProcess: StartProcessInstance =\n          callActivity(\"\
        TwitterDemoProcess\") //TODO adjust to your CallActivity id!\n           \
        \ .calledElement(\"TwitterDemoProcess\")\n            .inSource(\"email\"\n\
        \            .inSource(\"content\")\n            \n```\n"
      operationId: 'TwitterDemoProcess: StartProcessInstance'
      parameters:
      - name: key
        in: path
        description: The Process- or Decision-DefinitionKey of the Process or Decision
        required: true
        schema:
          type: string
          default: TwitterDemoProcess
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/StartProcessIn_In'
            examples:
              standard:
                value:
                  _api_doc:
                    email: me@myself.com
                    content: Test Tweet
                  variables:
                    email:
                      value: me@myself.com
                      type: String
                    content:
                      value: Test Tweet
                      type: String
                  businessKey: example-businesskey
                  withVariablesInReturn: true
        required: true
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StartProcessOut_Out'
              examples:
                standard:
                  value:
                    _api_doc: {}
                    variables: {}
                    id: f150c3f1-13f5-11ec-936e-0242ac1d0007
                    definitionId: processDefinitionKey:1:6fe66514-12ea-11ec-936e-0242ac1d0007
                    businessKey: example-businesskey
        '400':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CamundaError'
              examples:
                standardExample:
                  value:
                    type: BadRequest
                    message: The instance could not be created due to an invalid variable
                      value,

                      for example if the value could not be parsed to an Integer value
                      or the passed variable type is not supported.

                      See the [Introduction](https://docs.camunda.org/manual/7.15/reference/rest/overview/#error-handling)
                      for the error response format.
        '404':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CamundaError'
              examples:
                standardExample:
                  value:
                    type: NotFound
                    message: The instance could not be created due to a non existing
                      process definition key.

                      See the [Introduction](https://docs.camunda.org/manual/7.15/reference/rest/overview/#error-handling)
                      for the error response format.
        '500':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CamundaError'
              examples:
                standardExample:
                  value:
                    type: InternalServerError
                    message: The instance could not be created successfully.

                      See the [Introduction](https://docs.camunda.org/manual/7.15/reference/rest/overview/#error-handling)
                      for the error response format.
  /task/--REMOVE%3AReviewTweet--:
    post:
      tags:
      - TwitterDemoProcess
      summary: 'ReviewTweet: GetActiveTask'
      description: ''
      operationId: 'ReviewTweet: GetActiveTask'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/GetActiveTaskIn'
        required: true
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/GetActiveTaskOut'
        '400':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CamundaError'
              examples:
                standardExample:
                  value:
                    type: BadRequest
                    message: "Returned if some of the query parameters are invalid,\
                      \ for example if a sortOrder parameter is supplied, but no sortBy,\n\
                      \ or if an invalid operator for variable comparison is used.\n\
                      See the [Introduction](https://docs.camunda.org/manual/7.15/reference/rest/overview/#error-handling)\
                      \ for the error response format."
  /task/{taskId}/form-variables/--REMOVE%3AReviewTweet--:
    get:
      tags:
      - TwitterDemoProcess
      summary: 'ReviewTweet: GetTaskFormVariables'
      description: Retrieves the form variables for a task.

        The form variables take form data specified on the task into account.

        If form fields are defined, the variable types and default values of the form
        fields are taken into account.
      operationId: 'ReviewTweet: GetTaskFormVariables'
      parameters:
      - name: taskId
        in: path
        description: 'The taskId of the Form.

          > This is the result id of the `GetActiveTask`

          '
        required: true
        schema:
          type: string
          default: '{{taskId}}'
      - name: variableNames
        in: query
        description: A comma-separated list of variable names. Allows restricting
          the list of requested variables to the variable names in the list.

          It is best practice to restrict the list of variables to the variables actually
          required by the form in order to minimize fetching of data. If the query
          parameter is ommitted all variables are fetched.

          If the query parameter contains non-existent variable names, the variable
          names are ignored.
        required: false
        schema:
          type: string
          default: ''
      - name: deserializeValues
        in: query
        required: false
        schema:
          type: boolean
          default: false
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Map_CamundaVariable'
              examples:
                standard:
                  value: {}
        '404':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CamundaError'
              examples:
                standardExample:
                  value:
                    type: NotFound
                    message: Task id is null or does not exist.

                      See the [Introduction](https://docs.camunda.org/manual/7.15/reference/rest/overview/#error-handling)
                      for the error response format.
  /task/{taskId}/complete/--REMOVE%3AReviewTweet--:
    post:
      tags:
      - TwitterDemoProcess
      summary: 'ReviewTweet: CompleteTask'
      description: ''
      operationId: 'ReviewTweet: CompleteTask'
      parameters:
      - name: taskId
        in: path
        description: 'The taskId of the Form.

          > This is the result id of the `GetActiveTask`

          '
        required: true
        schema:
          type: string
          default: '{{taskId}}'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CompleteTaskIn_In'
            examples:
              standard:
                value:
                  _api_doc:
                    approved: true
                  variables:
                    approved:
                      value: true
                      type: Boolean
                  withVariablesInReturn: true
              Tweet accepted:
                value:
                  _api_doc:
                    approved: true
                  variables:
                    approved:
                      value: true
                      type: Boolean
                  withVariablesInReturn: true
              Tweet rejected:
                value:
                  _api_doc:
                    approved: false
                  variables:
                    approved:
                      value: false
                      type: Boolean
                  withVariablesInReturn: true
        required: true
      responses:
        '200':
          description: ''
        '400':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CamundaError'
              examples:
                standardExample:
                  value:
                    type: BadRequest
                    message: The variable value or type is invalid, for example if
                      the value could not be parsed to an Integer value or the passed
                      variable type is not supported.

                      See the [Introduction](https://docs.camunda.org/manual/7.15/reference/rest/overview/#error-handling)
                      for the error response format.
        '500':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CamundaError'
              examples:
                standardExample:
                  value:
                    type: InternalServerError
                    message: If the task does not exist or the corresponding process
                      instance could not be resumed successfully.

                      See the [Introduction](https://docs.camunda.org/manual/7.15/reference/rest/overview/#error-handling)
                      for the error response format.
components:
  schemas:
    CBoolean:
      required:
      - value
      - type
      type: object
      properties:
        value:
          type: boolean
        type:
          type: string
    CDouble:
      required:
      - value
      - type
      type: object
      properties:
        value:
          type: number
          format: double
        type:
          type: string
    CEnum:
      required:
      - value
      - type
      type: object
      properties:
        value:
          type: string
        type:
          type: string
    CFile:
      required:
      - value
      - valueInfo
      - type
      type: object
      properties:
        value:
          type: string
          description: The File's content as Base64 encoded String.
        valueInfo:
          $ref: '#/components/schemas/CFileValueInfo'
        type:
          type: string
    CFileValueInfo:
      required:
      - filename
      type: object
      properties:
        filename:
          type: string
        mimetype:
          type: string
    CInteger:
      required:
      - value
      - type
      type: object
      properties:
        value:
          type: integer
        type:
          type: string
    CJson:
      required:
      - value
      - type
      type: object
      properties:
        value:
          type: string
        type:
          type: string
    CLong:
      required:
      - value
      - type
      type: object
      properties:
        value:
          type: integer
          format: int64
        type:
          type: string
    CString:
      required:
      - value
      - type
      type: object
      properties:
        value:
          type: string
        type:
          type: string
    CamundaError:
      required:
      - type
      - message
      type: object
      properties:
        type:
          type: string
        message:
          type: string
    CamundaVariable:
      oneOf:
      - $ref: '#/components/schemas/CBoolean'
      - $ref: '#/components/schemas/CDouble'
      - $ref: '#/components/schemas/CEnum'
      - $ref: '#/components/schemas/CFile'
      - $ref: '#/components/schemas/CInteger'
      - $ref: '#/components/schemas/CJson'
      - $ref: '#/components/schemas/CLong'
      - $ref: '#/components/schemas/CString'
    CompleteTaskIn_In:
      required:
      - variables
      - withVariablesInReturn
      type: object
      properties:
        _api_doc:
          $ref: '#/components/schemas/ReviewTweet'
        variables:
          $ref: '#/components/schemas/Map_CamundaVariable'
        withVariablesInReturn:
          type: boolean
          description: Set to false will not return the Process Variables and the
            Result Status is 204.
      description: 'A JSON object with the following properties: (at least an empty
        JSON object {} or an empty request body)'
    CreateTweet:
      required:
      - email
      - content
      type: object
      properties:
        email:
          type: string
        content:
          type: string
      description: 'Every employee may create a Tweet.


        - email:   The email address of the creator.

        - content: The content of the Tweet.

        '
    GetActiveTaskIn:
      required:
      - processInstanceId
      - active
      type: object
      properties:
        processInstanceId:
          type: string
          description: The id of the process - you want to get the active tasks.

            > This is the result id of the `StartProcessOut`
        active:
          type: boolean
          description: We are only interested in the active Task(s)
      description: A JSON object with the following properties
    GetActiveTaskOut:
      required:
      - id
      type: object
      properties:
        id:
          type: string
          description: 'The Task Id you need to complete Task


            > **Postman**:

            >

            > Add the following to the tests to set the `taskId`:

            >

            >```

            let taskId = pm.response.json()[0].id

            console.log("taskId: " + taskId)

            pm.collectionVariables.set("taskId", taskId)

            >```

            >

            > This returns an Array!

            '
      description: A JSON object representing the newly created process instance.
    Map_CamundaVariable:
      type: object
      additionalProperties:
        $ref: '#/components/schemas/CamundaVariable'
    NoOutput:
      type: object
    ReviewTweet:
      required:
      - approved
      type: object
      properties:
        approved:
          type: boolean
          description: If true, the Boss accepted the Tweet
      description: Every Tweet has to be accepted by the Boss.
    StartProcessIn_In:
      required:
      - variables
      - withVariablesInReturn
      type: object
      properties:
        _api_doc:
          $ref: '#/components/schemas/CreateTweet'
        variables:
          $ref: '#/components/schemas/Map_CamundaVariable'
        businessKey:
          type: string
          description: The business key of the process instance.
        withVariablesInReturn:
          type: boolean
          description: Set to false will not return the Process Variables.
      description: 'A JSON object with the following properties: (at least an empty
        JSON object {} or an empty request body)'
    StartProcessOut_Out:
      required:
      - variables
      - id
      - definitionId
      type: object
      properties:
        _api_doc:
          $ref: '#/components/schemas/NoOutput'
        variables:
          $ref: '#/components/schemas/Map_CamundaVariable'
        id:
          type: string
          description: 'The id of the process instance.


            > **Postman**:

            >

            > Add the following to the tests to set the `processInstanceId`:

            >

            >```

            let processInstanceId = pm.response.json().id

            console.log("processInstanceId: " + processInstanceId)

            pm.collectionVariables.set("processInstanceId", processInstanceId)

            >```

            '
        definitionId:
          type: string
          description: The id of the process definition.
        businessKey:
          type: string
          description: The business key of the process instance.
      description: 'A JSON object representing the newly created process instance.

        '
