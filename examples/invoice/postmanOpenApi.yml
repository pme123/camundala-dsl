openapi: 3.0.3
info:
  title: 'Postman: Invoice Example Process API'
  version: '1.0'
  description: "\n\nGenerated Open API:\n* **openApi.yml**: Documentation of the Processes.\n\
    \  With small adjustments this can be imported to Postman!\n\n>WARNING: This is\
    \ an experimental way and not approved.\n\n\nThe Invoice example is provided in\
    \ all of the pre-packaged distros that Camunda provides.\nThis Camunda example\
    \ provides the Invoice application inside a Spring Boot application together with\
    \ all\nthe necessary adjustments needed to run it out of the box. This includes:\n\
    \n* The Camunda EE Webapps\n* The Camunda Rest API\n\nYou will need:\n\n* credentials\
    \ to access the enterprise repo in your `settings.xml`\n* a valid camunda-license\
    \ key file in your classpath in the file `camunda-license.txt`\n\n## How is it\
    \ done\n\n1. To embed the Camunda Engine with the Enterprise webapps and Rest\
    \ API you must add the following maven coordinates \nto your `pom.xml`:\n\n```xml\n\
    ...\n  <properties>\n    <camunda.version>7.15.0-ee</camunda.version>\n  </properties>\n\
    \n  <dependencyManagement>\n    <dependencies>\n      ...\n      <dependency>\n\
    \        <groupId>org.camunda.bpm</groupId>\n        <artifactId>camunda-bom</artifactId>\n\
    \        <version>${camunda.version}</version>\n        <type>pom</type>\n   \
    \     <scope>import</scope>\n      </dependency>\n    </dependencies>\n  </dependencyManagement>\n\
    \n  <dependencies>\n    <dependency>\n      <groupId>org.camunda.bpm.springboot</groupId>\n\
    \      <artifactId>camunda-bpm-spring-boot-starter-webapp-ee</artifactId>\n  \
    \  </dependency>\n    <dependency>\n      <groupId>org.camunda.bpm.springboot</groupId>\n\
    \      <artifactId>camunda-bpm-spring-boot-starter-rest</artifactId>\n    </dependency>\n\
    \    ...\n  </dependencies>\n...\n```\n\n2. For the example Invoice application,\
    \ the following dependency needs to be added in your `pom.xml` file:\n\n```xml\n\
    <dependency>\n  <groupId>org.camunda.bpm.example</groupId>\n  <artifactId>camunda-example-invoice</artifactId>\n\
    \  <version>${camunda.version}</version>\n  <classifier>classes</classifier>\n\
    \  <scope>compile</scope>\n</dependency>\n```\n\n3. An \"application\" class annotated\
    \ with `@SpringBootApplication` needs to be created. In order to have the Invoice\
    \ \nprocess application registered, add the annotation `@EnableProcessApplication`\
    \ to the same class, as well as include \nan empty `processes.xml` file to your\
    \ `META-INF` folder. To ensure that all of necessary BPMN and DMN files are deployed,\
    \ \nadd the following code in your \"application\" class:\n\n```java\n@SpringBootApplication\n\
    @EnableProcessApplication\npublic class Application {\n\n  public static void\
    \ main(String... args) {\n    SpringApplication.run(Application.class, args);\n\
    \  }\n\n  @Autowired\n  protected ProcessEngine processEngine;\n\n  protected\
    \ InvoiceProcessApplication invoicePa = new InvoiceProcessApplication();\n\n \
    \ @PostConstruct\n  public void deployInvoice() {\n    ClassLoader classLoader\
    \ = invoicePa.getClass().getClassLoader();\n\n    if(processEngine.getIdentityService().createUserQuery().list().isEmpty())\
    \ {\n      processEngine.getRepositoryService()\n          .createDeployment()\n\
    \          .addInputStream(\"invoice.v1.bpmn\", classLoader.getResourceAsStream(\"\
    invoice.v1.bpmn\"))\n          .addInputStream(\"reviewInvoice.bpmn\", classLoader.getResourceAsStream(\"\
    reviewInvoice.bpmn\"))\n          .deploy();\n    }\n  }\n\n  @EventListener\n\
    \  public void onPostDeploy(PostDeployEvent event) {\n    invoicePa.startFirstProcess(event.getProcessEngine());\n\
    \  }\n\n}\n```\n\n4. You can also put additional BPMN, CMMN and DMN files in your\
    \ classpath, they will be automatically deployed and \nregistered within the process\
    \ application. Forms HTML needs to be added in the `/resources/static/forms` directory.\n\
    \n5. If you want your Camunda license automatically used on Engine startup, just\
    \ put the file with the name \n`camunda-license.txt` on your classpath. \n\n6.\
    \ Adjust the `src/main/resorces/application.yaml` file according to your preferences.\
    \ The default setup will use an\n embedded H2 instance.\n\n## Run the application\
    \ and use Camunda Platform\n\nYou can build the application with `mvn clean install`\
    \ and then run it with the `java -jar` command.\nYou can also execute the application\
    \ with `mvn spring-boot:run`.\n\nThen you can access the Camunda Webapps in your\
    \ browser: `http://localhost:8080/` (provide login/password \nfrom `application.yaml`,\
    \ default: demo/demo). The Rest API can be available through `http://localhost:8080/engine-rest`.\n\
    \ \n\n\n.some **CHANGELOG**\n[%collapsible]\n====\n\n<h1 id=\"changelog\" class=\"\
    section\">Changelog</h1>\n<p>All notable changes to this project will be documented\
    \ in this file.</p>\n<ul>\n  <li>Types of Changes (L3):</li>\n</ul>\n<ul>\n  <li>Added:\
    \ new features</li>\n</ul>\n<ul>\n  <li>Changed: changes in existing functionality</li>\n\
    </ul>\n<ul>\n  <li>Deprecated: soon-to-be-removed features</li>\n</ul>\n<ul>\n\
    \  <li>Removed: now removed features</li>\n</ul>\n<ul>\n  <li>Fixed: any bug fixes</li>\n\
    </ul>\n<ul>\n  <li>Security: in case of vulnerabilities</li>\n</ul>\n<p>The format\
    \ is based on <a href=\"https://keepachangelog.com/en/1.0.0/\">Keep a Changelog</a>,\n\
    and this project adheres to <a href=\"https://semver.org/spec/v2.0.0.html\">Semantic\
    \ Versioning</a>.</p>\n\n<h2 id=\"unreleased\" class=\"section\">Unreleased</h2>\n\
    <p>Initial Version</p>\n====\n\n<details>\n<summary><b>CHANGELOG</b></summary>\n\
    <p>\n\n\n<h1 id=\"changelog\" class=\"section\">Changelog</h1>\n<p>All notable\
    \ changes to this project will be documented in this file.</p>\n<ul>\n  <li>Types\
    \ of Changes (L3):</li>\n</ul>\n<ul>\n  <li>Added: new features</li>\n</ul>\n\
    <ul>\n  <li>Changed: changes in existing functionality</li>\n</ul>\n<ul>\n  <li>Deprecated:\
    \ soon-to-be-removed features</li>\n</ul>\n<ul>\n  <li>Removed: now removed features</li>\n\
    </ul>\n<ul>\n  <li>Fixed: any bug fixes</li>\n</ul>\n<ul>\n  <li>Security: in\
    \ case of vulnerabilities</li>\n</ul>\n<p>The format is based on <a href=\"https://keepachangelog.com/en/1.0.0/\"\
    >Keep a Changelog</a>,\nand this project adheres to <a href=\"https://semver.org/spec/v2.0.0.html\"\
    >Semantic Versioning</a>.</p>\n\n<h2 id=\"unreleased\" class=\"section\">Unreleased</h2>\n\
    <p>Initial Version</p>\n\n</p>\n</details>\n\n"
servers:
- url: http://localhost:8034/engine-rest
paths:
  /process-definition/key/{key}/start/--REMOVE%3AInvoiceReceipt--:
    post:
      tags:
      - InvoiceReceipt
      summary: 'InvoiceReceipt: StartProcessInstance'
      description: "This starts the Invoice Receipt Process.\n\nUsage as _CallActivity_:\n\
        ```\nlazy val InvoiceReceiptProcess =\n          callActivity(\"InvoiceReceipt\"\
        ) //TODO adjust to your CallActivity id!\n            .calledElement(\"InvoiceReceipt\"\
        )\n            .inSource(\"creditor\")\n            .inSource(\"amount\")\n\
        \            .inSource(\"invoiceCategory\")\n            .inSource(\"invoiceNumber\"\
        )\n            .inSource(\"invoiceDocument\")\n            \n```\n"
      operationId: 'InvoiceReceipt: StartProcessInstance'
      parameters:
      - name: key
        in: path
        description: The Process- or Decision-DefinitionKey of the Process or Decision
        required: true
        schema:
          type: string
          default: InvoiceReceipt
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/StartProcessIn'
            examples:
              standard:
                value:
                  variables:
                    creditor:
                      value: Great Pizza for Everyone Inc.
                      type: String
                    invoiceNumber:
                      value: I-12345
                      type: String
                    amount:
                      value: 30.0
                      type: Double
                    invoiceDocument:
                      value: 
                      valueInfo:
                        filename: invoice.pdf
                        mimetype: application/pdf
                      type: File
                    invoiceCategory:
                      value: Software License Costs
                      type: String
                  businessKey: example-businesskey
                  withVariablesInReturn: true
        required: true
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StartProcessOut'
              examples:
                standard:
                  value:
                    variables: {}
                    id: f150c3f1-13f5-11ec-936e-0242ac1d0007
                    definitionId: processDefinitionKey:1:6fe66514-12ea-11ec-936e-0242ac1d0007
                    businessKey: example-businesskey
        '400':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CamundaError'
              examples:
                standardExample:
                  value:
                    type: BadRequest
                    message: The instance could not be created due to an invalid variable
                      value,

                      for example if the value could not be parsed to an Integer value
                      or the passed variable type is not supported.

                      See the [Introduction](https://docs.camunda.org/manual/7.15/reference/rest/overview/#error-handling)
                      for the error response format.
        '404':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CamundaError'
              examples:
                standardExample:
                  value:
                    type: NotFound
                    message: The instance could not be created due to a non existing
                      process definition key.

                      See the [Introduction](https://docs.camunda.org/manual/7.15/reference/rest/overview/#error-handling)
                      for the error response format.
        '500':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CamundaError'
              examples:
                standardExample:
                  value:
                    type: InternalServerError
                    message: The instance could not be created successfully.

                      See the [Introduction](https://docs.camunda.org/manual/7.15/reference/rest/overview/#error-handling)
                      for the error response format.
  /decision-definition/key/{key}/evaluate/--REMOVE%3AAssignApproverGroup--:
    post:
      tags:
      - InvoiceReceipt
      summary: 'AssignApproverGroup: EvaluateDecision'
      description: '


        Decision DMN:

        - _decisionDefinitionKey_: `invoice-assign-approver`,

        - _hitPolicy_: `COLLECT`,

        '
      operationId: 'AssignApproverGroup: EvaluateDecision'
      parameters:
      - name: key
        in: path
        description: The Process- or Decision-DefinitionKey of the Process or Decision
        required: true
        schema:
          type: string
          default: invoice-assign-approver
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/EvaluateDecisionIn'
            examples:
              standard:
                value:
                  variables:
                    amount:
                      value: 30.0
                      type: Double
                    invoiceCategory:
                      value: Software License Costs
                      type: String
        required: true
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Map_CamundaVariable'
              examples:
                standard:
                  value:
                  - approverGroups:
                      value: approverGroups -> v could NOT be Parsed to a JSON!
                      type: Json
        '403':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CamundaError'
              examples:
                standardExample:
                  value:
                    type: Forbidden
                    message: The authenticated user is unauthorized to evaluate this
                      decision.

                      See the [Introduction](https://docs.camunda.org/manual/7.15/reference/rest/overview/#error-handling)
                      for the error response format.
        '404':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CamundaError'
              examples:
                standardExample:
                  value:
                    type: NotFound
                    message: The decision could not be evaluated due to a nonexistent
                      decision definition.

                      See the [Introduction](https://docs.camunda.org/manual/7.15/reference/rest/overview/#error-handling)
                      for the error response format.
        '500':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CamundaError'
              examples:
                standardExample:
                  value:
                    type: InternalServerError
                    message: "The decision could not be evaluated successfully,\n\
                      \ e.g. some of the input values are not provided but they are\
                      \ required.\nSee the [Introduction](https://docs.camunda.org/manual/7.15/reference/rest/overview/#error-handling)\
                      \ for the error response format."
  /task/--REMOVE%3AApproveInvoice--:
    post:
      tags:
      - InvoiceReceipt
      summary: 'ApproveInvoice: GetActiveTask'
      description: Approve the invoice (or not).
      operationId: 'ApproveInvoice: GetActiveTask'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/GetActiveTaskIn'
        required: true
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/GetActiveTaskOut'
        '400':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CamundaError'
              examples:
                standardExample:
                  value:
                    type: BadRequest
                    message: "Returned if some of the query parameters are invalid,\
                      \ for example if a sortOrder parameter is supplied, but no sortBy,\n\
                      \ or if an invalid operator for variable comparison is used.\n\
                      See the [Introduction](https://docs.camunda.org/manual/7.15/reference/rest/overview/#error-handling)\
                      \ for the error response format."
  /task/{taskId}/form-variables/--REMOVE%3AApproveInvoice--:
    get:
      tags:
      - InvoiceReceipt
      summary: 'ApproveInvoice: GetTaskFormVariables'
      description: Retrieves the form variables for a task.

        The form variables take form data specified on the task into account.

        If form fields are defined, the variable types and default values of the form
        fields are taken into account.
      operationId: 'ApproveInvoice: GetTaskFormVariables'
      parameters:
      - name: taskId
        in: path
        description: 'The taskId of the Form.

          > This is the result id of the `GetActiveTask`

          '
        required: true
        schema:
          type: string
          default: '{{taskId}}'
      - name: variableNames
        in: query
        description: A comma-separated list of variable names. Allows restricting
          the list of requested variables to the variable names in the list.

          It is best practice to restrict the list of variables to the variables actually
          required by the form in order to minimize fetching of data. If the query
          parameter is ommitted all variables are fetched.

          If the query parameter contains non-existent variable names, the variable
          names are ignored.
        required: false
        schema:
          type: string
          default: creditor,amount,invoiceCategory,invoiceNumber,invoiceDocument
      - name: deserializeValues
        in: query
        required: false
        schema:
          type: boolean
          default: false
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Map_CamundaVariable'
              examples:
                standard:
                  value:
                    creditor:
                      value: Great Pizza for Everyone Inc.
                      type: String
                    invoiceNumber:
                      value: I-12345
                      type: String
                    amount:
                      value: 30.0
                      type: Double
                    invoiceDocument:
                      value: 
                      valueInfo:
                        filename: invoice.pdf
                        mimetype: application/pdf
                      type: File
                    invoiceCategory:
                      value: Software License Costs
                      type: String
        '404':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CamundaError'
              examples:
                standardExample:
                  value:
                    type: NotFound
                    message: Task id is null or does not exist.

                      See the [Introduction](https://docs.camunda.org/manual/7.15/reference/rest/overview/#error-handling)
                      for the error response format.
  /task/{taskId}/complete/--REMOVE%3AApproveInvoice--:
    post:
      tags:
      - InvoiceReceipt
      summary: 'ApproveInvoice: CompleteTask'
      description: Approve the invoice (or not).
      operationId: 'ApproveInvoice: CompleteTask'
      parameters:
      - name: taskId
        in: path
        description: 'The taskId of the Form.

          > This is the result id of the `GetActiveTask`

          '
        required: true
        schema:
          type: string
          default: '{{taskId}}'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CompleteTaskIn'
            examples:
              standard:
                value:
                  variables:
                    approved:
                      value: true
                      type: Boolean
                  withVariablesInReturn: true
              Invoice approved:
                value:
                  variables:
                    approved:
                      value: true
                      type: Boolean
                  withVariablesInReturn: true
              Invoice NOT approved:
                value:
                  variables:
                    approved:
                      value: false
                      type: Boolean
                  withVariablesInReturn: true
        required: true
      responses:
        '200':
          description: ''
        '400':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CamundaError'
              examples:
                standardExample:
                  value:
                    type: BadRequest
                    message: The variable value or type is invalid, for example if
                      the value could not be parsed to an Integer value or the passed
                      variable type is not supported.

                      See the [Introduction](https://docs.camunda.org/manual/7.15/reference/rest/overview/#error-handling)
                      for the error response format.
        '500':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CamundaError'
              examples:
                standardExample:
                  value:
                    type: InternalServerError
                    message: If the task does not exist or the corresponding process
                      instance could not be resumed successfully.

                      See the [Introduction](https://docs.camunda.org/manual/7.15/reference/rest/overview/#error-handling)
                      for the error response format.
  /task/--REMOVE%3APrepareBankTransfer--:
    post:
      tags:
      - InvoiceReceipt
      summary: 'PrepareBankTransfer: GetActiveTask'
      description: Prepare the bank transfer in the Financial Accounting System.
      operationId: 'PrepareBankTransfer: GetActiveTask'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/GetActiveTaskIn'
        required: true
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/GetActiveTaskOut'
        '400':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CamundaError'
              examples:
                standardExample:
                  value:
                    type: BadRequest
                    message: "Returned if some of the query parameters are invalid,\
                      \ for example if a sortOrder parameter is supplied, but no sortBy,\n\
                      \ or if an invalid operator for variable comparison is used.\n\
                      See the [Introduction](https://docs.camunda.org/manual/7.15/reference/rest/overview/#error-handling)\
                      \ for the error response format."
  /task/{taskId}/form-variables/--REMOVE%3APrepareBankTransfer--:
    get:
      tags:
      - InvoiceReceipt
      summary: 'PrepareBankTransfer: GetTaskFormVariables'
      description: Retrieves the form variables for a task.

        The form variables take form data specified on the task into account.

        If form fields are defined, the variable types and default values of the form
        fields are taken into account.
      operationId: 'PrepareBankTransfer: GetTaskFormVariables'
      parameters:
      - name: taskId
        in: path
        description: 'The taskId of the Form.

          > This is the result id of the `GetActiveTask`

          '
        required: true
        schema:
          type: string
          default: '{{taskId}}'
      - name: variableNames
        in: query
        description: A comma-separated list of variable names. Allows restricting
          the list of requested variables to the variable names in the list.

          It is best practice to restrict the list of variables to the variables actually
          required by the form in order to minimize fetching of data. If the query
          parameter is ommitted all variables are fetched.

          If the query parameter contains non-existent variable names, the variable
          names are ignored.
        required: false
        schema:
          type: string
          default: creditor,amount,invoiceCategory,invoiceNumber,invoiceDocument
      - name: deserializeValues
        in: query
        required: false
        schema:
          type: boolean
          default: false
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Map_CamundaVariable'
              examples:
                standard:
                  value:
                    creditor:
                      value: Great Pizza for Everyone Inc.
                      type: String
                    invoiceNumber:
                      value: I-12345
                      type: String
                    amount:
                      value: 30.0
                      type: Double
                    invoiceDocument:
                      value: 
                      valueInfo:
                        filename: invoice.pdf
                        mimetype: application/pdf
                      type: File
                    invoiceCategory:
                      value: Software License Costs
                      type: String
        '404':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CamundaError'
              examples:
                standardExample:
                  value:
                    type: NotFound
                    message: Task id is null or does not exist.

                      See the [Introduction](https://docs.camunda.org/manual/7.15/reference/rest/overview/#error-handling)
                      for the error response format.
  /task/{taskId}/complete/--REMOVE%3APrepareBankTransfer--:
    post:
      tags:
      - InvoiceReceipt
      summary: 'PrepareBankTransfer: CompleteTask'
      description: Prepare the bank transfer in the Financial Accounting System.
      operationId: 'PrepareBankTransfer: CompleteTask'
      parameters:
      - name: taskId
        in: path
        description: 'The taskId of the Form.

          > This is the result id of the `GetActiveTask`

          '
        required: true
        schema:
          type: string
          default: '{{taskId}}'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CompleteTaskIn'
            examples:
              standard:
                value:
                  variables: {}
                  withVariablesInReturn: true
        required: true
      responses:
        '200':
          description: ''
        '400':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CamundaError'
              examples:
                standardExample:
                  value:
                    type: BadRequest
                    message: The variable value or type is invalid, for example if
                      the value could not be parsed to an Integer value or the passed
                      variable type is not supported.

                      See the [Introduction](https://docs.camunda.org/manual/7.15/reference/rest/overview/#error-handling)
                      for the error response format.
        '500':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CamundaError'
              examples:
                standardExample:
                  value:
                    type: InternalServerError
                    message: If the task does not exist or the corresponding process
                      instance could not be resumed successfully.

                      See the [Introduction](https://docs.camunda.org/manual/7.15/reference/rest/overview/#error-handling)
                      for the error response format.
  /process-definition/key/{key}/start/--REMOVE%3AReviewInvoiceProcess--:
    post:
      tags:
      - ReviewInvoiceProcess
      summary: 'ReviewInvoiceProcess: StartProcessInstance'
      description: "This starts the Review Invoice Process.\n\nUsage as _CallActivity_:\n\
        ```\nlazy val ReviewInvoiceProcessProcess =\n          callActivity(\"ReviewInvoiceProcess\"\
        ) //TODO adjust to your CallActivity id!\n            .calledElement(\"ReviewInvoiceProcess\"\
        )\n            .inSource(\"creditor\")\n            .inSource(\"amount\")\n\
        \            .inSource(\"invoiceCategory\")\n            .inSource(\"invoiceNumber\"\
        )\n            .inSource(\"invoiceDocument\")\n            .outSource(\"clarified\"\
        )\n```\n"
      operationId: 'ReviewInvoiceProcess: StartProcessInstance'
      parameters:
      - name: key
        in: path
        description: The Process- or Decision-DefinitionKey of the Process or Decision
        required: true
        schema:
          type: string
          default: ReviewInvoiceProcess
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/StartProcessIn'
            examples:
              standard:
                value:
                  variables:
                    creditor:
                      value: Great Pizza for Everyone Inc.
                      type: String
                    invoiceNumber:
                      value: I-12345
                      type: String
                    amount:
                      value: 30.0
                      type: Double
                    invoiceDocument:
                      value: 
                      valueInfo:
                        filename: invoice.pdf
                        mimetype: application/pdf
                      type: File
                    invoiceCategory:
                      value: Software License Costs
                      type: String
                  businessKey: example-businesskey
                  withVariablesInReturn: true
        required: true
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StartProcessOut'
              examples:
                standard:
                  value:
                    variables:
                      clarified:
                        value: true
                        type: Boolean
                    id: f150c3f1-13f5-11ec-936e-0242ac1d0007
                    definitionId: processDefinitionKey:1:6fe66514-12ea-11ec-936e-0242ac1d0007
                    businessKey: example-businesskey
        '400':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CamundaError'
              examples:
                standardExample:
                  value:
                    type: BadRequest
                    message: The instance could not be created due to an invalid variable
                      value,

                      for example if the value could not be parsed to an Integer value
                      or the passed variable type is not supported.

                      See the [Introduction](https://docs.camunda.org/manual/7.15/reference/rest/overview/#error-handling)
                      for the error response format.
        '404':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CamundaError'
              examples:
                standardExample:
                  value:
                    type: NotFound
                    message: The instance could not be created due to a non existing
                      process definition key.

                      See the [Introduction](https://docs.camunda.org/manual/7.15/reference/rest/overview/#error-handling)
                      for the error response format.
        '500':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CamundaError'
              examples:
                standardExample:
                  value:
                    type: InternalServerError
                    message: The instance could not be created successfully.

                      See the [Introduction](https://docs.camunda.org/manual/7.15/reference/rest/overview/#error-handling)
                      for the error response format.
  /task/--REMOVE%3AAssignReviewer--:
    post:
      tags:
      - ReviewInvoiceProcess
      summary: 'AssignReviewer: GetActiveTask'
      description: Select the Reviewer.
      operationId: 'AssignReviewer: GetActiveTask'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/GetActiveTaskIn'
        required: true
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/GetActiveTaskOut'
        '400':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CamundaError'
              examples:
                standardExample:
                  value:
                    type: BadRequest
                    message: "Returned if some of the query parameters are invalid,\
                      \ for example if a sortOrder parameter is supplied, but no sortBy,\n\
                      \ or if an invalid operator for variable comparison is used.\n\
                      See the [Introduction](https://docs.camunda.org/manual/7.15/reference/rest/overview/#error-handling)\
                      \ for the error response format."
  /task/{taskId}/form-variables/--REMOVE%3AAssignReviewer--:
    get:
      tags:
      - ReviewInvoiceProcess
      summary: 'AssignReviewer: GetTaskFormVariables'
      description: Retrieves the form variables for a task.

        The form variables take form data specified on the task into account.

        If form fields are defined, the variable types and default values of the form
        fields are taken into account.
      operationId: 'AssignReviewer: GetTaskFormVariables'
      parameters:
      - name: taskId
        in: path
        description: 'The taskId of the Form.

          > This is the result id of the `GetActiveTask`

          '
        required: true
        schema:
          type: string
          default: '{{taskId}}'
      - name: variableNames
        in: query
        description: A comma-separated list of variable names. Allows restricting
          the list of requested variables to the variable names in the list.

          It is best practice to restrict the list of variables to the variables actually
          required by the form in order to minimize fetching of data. If the query
          parameter is ommitted all variables are fetched.

          If the query parameter contains non-existent variable names, the variable
          names are ignored.
        required: false
        schema:
          type: string
          default: creditor,amount,invoiceCategory,invoiceNumber,invoiceDocument
      - name: deserializeValues
        in: query
        required: false
        schema:
          type: boolean
          default: false
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Map_CamundaVariable'
              examples:
                standard:
                  value:
                    creditor:
                      value: Great Pizza for Everyone Inc.
                      type: String
                    invoiceNumber:
                      value: I-12345
                      type: String
                    amount:
                      value: 30.0
                      type: Double
                    invoiceDocument:
                      value: 
                      valueInfo:
                        filename: invoice.pdf
                        mimetype: application/pdf
                      type: File
                    invoiceCategory:
                      value: Software License Costs
                      type: String
        '404':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CamundaError'
              examples:
                standardExample:
                  value:
                    type: NotFound
                    message: Task id is null or does not exist.

                      See the [Introduction](https://docs.camunda.org/manual/7.15/reference/rest/overview/#error-handling)
                      for the error response format.
  /task/{taskId}/complete/--REMOVE%3AAssignReviewer--:
    post:
      tags:
      - ReviewInvoiceProcess
      summary: 'AssignReviewer: CompleteTask'
      description: Select the Reviewer.
      operationId: 'AssignReviewer: CompleteTask'
      parameters:
      - name: taskId
        in: path
        description: 'The taskId of the Form.

          > This is the result id of the `GetActiveTask`

          '
        required: true
        schema:
          type: string
          default: '{{taskId}}'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CompleteTaskIn'
            examples:
              standard:
                value:
                  variables:
                    reviewer:
                      value: John
                      type: String
                  withVariablesInReturn: true
        required: true
      responses:
        '200':
          description: ''
        '400':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CamundaError'
              examples:
                standardExample:
                  value:
                    type: BadRequest
                    message: The variable value or type is invalid, for example if
                      the value could not be parsed to an Integer value or the passed
                      variable type is not supported.

                      See the [Introduction](https://docs.camunda.org/manual/7.15/reference/rest/overview/#error-handling)
                      for the error response format.
        '500':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CamundaError'
              examples:
                standardExample:
                  value:
                    type: InternalServerError
                    message: If the task does not exist or the corresponding process
                      instance could not be resumed successfully.

                      See the [Introduction](https://docs.camunda.org/manual/7.15/reference/rest/overview/#error-handling)
                      for the error response format.
  /task/--REMOVE%3AReviewInvoice--:
    post:
      tags:
      - ReviewInvoiceProcess
      summary: 'ReviewInvoice: GetActiveTask'
      description: Review Invoice and approve.
      operationId: 'ReviewInvoice: GetActiveTask'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/GetActiveTaskIn'
        required: true
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/GetActiveTaskOut'
        '400':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CamundaError'
              examples:
                standardExample:
                  value:
                    type: BadRequest
                    message: "Returned if some of the query parameters are invalid,\
                      \ for example if a sortOrder parameter is supplied, but no sortBy,\n\
                      \ or if an invalid operator for variable comparison is used.\n\
                      See the [Introduction](https://docs.camunda.org/manual/7.15/reference/rest/overview/#error-handling)\
                      \ for the error response format."
  /task/{taskId}/form-variables/--REMOVE%3AReviewInvoice--:
    get:
      tags:
      - ReviewInvoiceProcess
      summary: 'ReviewInvoice: GetTaskFormVariables'
      description: Retrieves the form variables for a task.

        The form variables take form data specified on the task into account.

        If form fields are defined, the variable types and default values of the form
        fields are taken into account.
      operationId: 'ReviewInvoice: GetTaskFormVariables'
      parameters:
      - name: taskId
        in: path
        description: 'The taskId of the Form.

          > This is the result id of the `GetActiveTask`

          '
        required: true
        schema:
          type: string
          default: '{{taskId}}'
      - name: variableNames
        in: query
        description: A comma-separated list of variable names. Allows restricting
          the list of requested variables to the variable names in the list.

          It is best practice to restrict the list of variables to the variables actually
          required by the form in order to minimize fetching of data. If the query
          parameter is ommitted all variables are fetched.

          If the query parameter contains non-existent variable names, the variable
          names are ignored.
        required: false
        schema:
          type: string
          default: creditor,amount,invoiceCategory,invoiceNumber,invoiceDocument
      - name: deserializeValues
        in: query
        required: false
        schema:
          type: boolean
          default: false
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Map_CamundaVariable'
              examples:
                standard:
                  value:
                    creditor:
                      value: Great Pizza for Everyone Inc.
                      type: String
                    invoiceNumber:
                      value: I-12345
                      type: String
                    amount:
                      value: 30.0
                      type: Double
                    invoiceDocument:
                      value: 
                      valueInfo:
                        filename: invoice.pdf
                        mimetype: application/pdf
                      type: File
                    invoiceCategory:
                      value: Software License Costs
                      type: String
        '404':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CamundaError'
              examples:
                standardExample:
                  value:
                    type: NotFound
                    message: Task id is null or does not exist.

                      See the [Introduction](https://docs.camunda.org/manual/7.15/reference/rest/overview/#error-handling)
                      for the error response format.
  /task/{taskId}/complete/--REMOVE%3AReviewInvoice--:
    post:
      tags:
      - ReviewInvoiceProcess
      summary: 'ReviewInvoice: CompleteTask'
      description: Review Invoice and approve.
      operationId: 'ReviewInvoice: CompleteTask'
      parameters:
      - name: taskId
        in: path
        description: 'The taskId of the Form.

          > This is the result id of the `GetActiveTask`

          '
        required: true
        schema:
          type: string
          default: '{{taskId}}'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CompleteTaskIn'
            examples:
              standard:
                value:
                  variables:
                    clarified:
                      value: true
                      type: Boolean
                  withVariablesInReturn: true
              Invoice clarified:
                value:
                  variables:
                    clarified:
                      value: true
                      type: Boolean
                  withVariablesInReturn: true
              Invoice NOT clarified:
                value:
                  variables:
                    clarified:
                      value: false
                      type: Boolean
                  withVariablesInReturn: true
        required: true
      responses:
        '200':
          description: ''
        '400':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CamundaError'
              examples:
                standardExample:
                  value:
                    type: BadRequest
                    message: The variable value or type is invalid, for example if
                      the value could not be parsed to an Integer value or the passed
                      variable type is not supported.

                      See the [Introduction](https://docs.camunda.org/manual/7.15/reference/rest/overview/#error-handling)
                      for the error response format.
        '500':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CamundaError'
              examples:
                standardExample:
                  value:
                    type: InternalServerError
                    message: If the task does not exist or the corresponding process
                      instance could not be resumed successfully.

                      See the [Introduction](https://docs.camunda.org/manual/7.15/reference/rest/overview/#error-handling)
                      for the error response format.
components:
  schemas:
    CBoolean:
      required:
      - value
      - type
      type: object
      properties:
        value:
          type: boolean
        type:
          type: string
    CDouble:
      required:
      - value
      - type
      type: object
      properties:
        value:
          type: number
          format: double
        type:
          type: string
    CEnum:
      required:
      - value
      - type
      type: object
      properties:
        value:
          type: string
        type:
          type: string
    CFile:
      required:
      - value
      - valueInfo
      - type
      type: object
      properties:
        value:
          type: string
          description: The File's content as Base64 encoded String.
        valueInfo:
          $ref: '#/components/schemas/CFileValueInfo'
        type:
          type: string
    CFileValueInfo:
      required:
      - filename
      type: object
      properties:
        filename:
          type: string
        mimetype:
          type: string
    CInteger:
      required:
      - value
      - type
      type: object
      properties:
        value:
          type: integer
        type:
          type: string
    CJson:
      required:
      - value
      - type
      type: object
      properties:
        value:
          type: string
        type:
          type: string
    CLong:
      required:
      - value
      - type
      type: object
      properties:
        value:
          type: integer
          format: int64
        type:
          type: string
    CString:
      required:
      - value
      - type
      type: object
      properties:
        value:
          type: string
        type:
          type: string
    CamundaError:
      required:
      - type
      - message
      type: object
      properties:
        type:
          type: string
        message:
          type: string
    CamundaVariable:
      oneOf:
      - $ref: '#/components/schemas/CBoolean'
      - $ref: '#/components/schemas/CDouble'
      - $ref: '#/components/schemas/CEnum'
      - $ref: '#/components/schemas/CFile'
      - $ref: '#/components/schemas/CInteger'
      - $ref: '#/components/schemas/CJson'
      - $ref: '#/components/schemas/CLong'
      - $ref: '#/components/schemas/CString'
    CompleteTaskIn:
      required:
      - variables
      - withVariablesInReturn
      type: object
      properties:
        variables:
          $ref: '#/components/schemas/Map_CamundaVariable'
        withVariablesInReturn:
          type: boolean
          description: Set to false will not return the Process Variables and the
            Result Status is 204.
      description: 'A JSON object with the following properties: (at least an empty
        JSON object {} or an empty request body)'
    EvaluateDecisionIn:
      required:
      - variables
      type: object
      properties:
        variables:
          $ref: '#/components/schemas/Map_CamundaVariable'
      description: 'A JSON object with the following properties:'
    GetActiveTaskIn:
      required:
      - processInstanceId
      - active
      type: object
      properties:
        processInstanceId:
          type: string
          description: The id of the process - you want to get the active tasks.

            > This is the result id of the `StartProcessOut`
        active:
          type: boolean
          description: We are only interested in the active Task(s)
      description: A JSON object with the following properties
    GetActiveTaskOut:
      required:
      - id
      type: object
      properties:
        id:
          type: string
          description: 'The Task Id you need to complete Task


            > **Postman**:

            >

            > Add the following to the tests to set the `taskId`:

            >

            >```

            let taskId = pm.response.json()[0].id

            console.log("taskId: " + taskId)

            pm.collectionVariables.set("taskId", taskId)

            >```

            >

            > This returns an Array!

            '
      description: A JSON object representing the newly created process instance.
    Map_CamundaVariable:
      type: object
      additionalProperties:
        $ref: '#/components/schemas/CamundaVariable'
    StartProcessIn:
      required:
      - variables
      - withVariablesInReturn
      type: object
      properties:
        variables:
          $ref: '#/components/schemas/Map_CamundaVariable'
        businessKey:
          type: string
          description: The business key of the process instance.
        withVariablesInReturn:
          type: boolean
          description: Set to false will not return the Process Variables.
      description: 'A JSON object with the following properties: (at least an empty
        JSON object {} or an empty request body)'
    StartProcessOut:
      required:
      - variables
      - id
      - definitionId
      type: object
      properties:
        variables:
          $ref: '#/components/schemas/Map_CamundaVariable'
        id:
          type: string
          description: 'The id of the process instance.


            > **Postman**:

            >

            > Add the following to the tests to set the `processInstanceId`:

            >

            >```

            let processInstanceId = pm.response.json().id

            console.log("processInstanceId: " + processInstanceId)

            pm.collectionVariables.set("processInstanceId", processInstanceId)

            >```

            '
        definitionId:
          type: string
          description: The id of the process definition.
        businessKey:
          type: string
          description: The business key of the process instance.
      description: 'A JSON object representing the newly created process instance.

        '
